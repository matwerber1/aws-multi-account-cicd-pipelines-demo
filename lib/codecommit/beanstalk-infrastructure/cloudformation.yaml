AWSTemplateFormatVersion: '2010-09-09'
Description: 
  Deploy a VPC and an AWS Elastic Beanstalk environment with a demo Java app. 
  The app will later be updated by a separate CI/CD pipeline.

Parameters:

  # This is an arbitrary name used to name some of the resources that get created:
  EnvironmentName:
    Type: String
    Default: backend-infrastructure

  # These VPC parameters are used to create a new VPC. If you want to use an existing VPC, 
  # remove the parameters (and VPC resources) from this template and instead hardcode or
  # pass in the existing VPC information via parameters:
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:

  ######################
  # BEANSTALK RESOURCES
  ######################

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk.html
  backendApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref EnvironmentName
      Description: Backend Java app

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html
  sampleEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName: !Ref backendApplication
      TemplateName: !Ref beanstalkTemplate
      EnvironmentName: !Ref EnvironmentName

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html
  beanstalkTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref backendApplication
      Description: AWS ElasticBeanstalk Sample Configuration Template

      # SolutionStackName must match one of the supported Beanstalk platforms listed at link below:
      # https://docs.aws.amazon.com/elasticbeanstalk/latest/platforms/platforms-supported.htm
      SolutionStackName: "64bit Amazon Linux 2 v3.1.3 running Corretto 11"
      OptionSettings:
        # The options below mirror what you can configure in the Beanstalk web UI.
        # There are many more options available than those listed below. If you do
        # not specify an explicit option value, a default value will be used. The
        # full list of options and their default values is below: 
        # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html
        #-----------------------------------------------------------------
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: 1

        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: 5
        #-----------------------------------------------------------------
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref BeanstalkEc2InstanceProfile
        #-----------------------------------------------------------------
        - Namespace: aws:ec2:instances
          OptionName: EnableSpot
          Value: true

        - Namespace: aws:ec2:instances
          OptionName: SpotFleetOnDemandBase
          Value: 1

        - Namespace: aws:ec2:instances
          OptionName: SpotFleetOnDemandAboveBasePercentage
          Value: 70
        #-----------------------------------------------------------------
        - Namespace: aws:ec2:vpc
          OptionName: VPCId
          Value: !Ref VPC
        
          # These are the subnets of the auto-scaling EC2s. If you are using a public load balancer, 
          # then it makes sense to keep the EC2s in private subnets. 
        - Namespace: aws:ec2:vpc
          OptionName: Subnets             
          Value: !Sub "${PrivateSubnet1},${PrivateSubnet2}"

        # Determines if load balancer is public or private: 
        - Namespace: aws:ec2:vpc
          OptionName: ELBScheme
          Value: public
        
        # The subnets of the load balancer, which should be public subnets if the load balancer is public:
        - Namespace: aws:ec2:vpc
          OptionName: ELBSubnets
          Value: !Sub "${PublicSubnet1},${PublicSubnet2}"

        - Namespace: aws:ec2:vpc
          OptionName: AssociatePublicIpAddress
          Value: false
        #-----------------------------------------------------------------
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: LoadBalancerType
          Value: application
        
        - Namespace: aws:elasticbeanstalk:environment
          OptionName: ServiceRole
          Value: !GetAtt BeanstalkServiceRole.Arn

        # This is the port that the EC2 instances will be listening on. If you are using a 
        # load balancer, the load balancer will default to port 80 unless you override it
        # via another option setting.
        - Namespace: aws:elasticbeanstalk:environment:process:default
          OptionName: Port
          Value: 8080

  # This instance profile is needed to attach an IAM role to the EC2 instances launched \
  # by Beanstalk. At a minimum, this role must provide the instances with permissions to
  # interact with the Beanstalk service. The role could also be modified to allow the 
  # instances to communicate with other AWS services, like Amazon S3, if needed.
  BeanstalkEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Ref BeanstalkEc2AutoscalingRole
      Roles: 
        - !Ref BeanstalkEc2AutoscalingRole

  # This is the role attached to EC2 instances created by Beanstalk:
  BeanstalkEc2AutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        # The three policies below are required for EC2 instances managed by Beanstalk: 
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
  
  # This is the role used by Elastic Beanstalk to create and configure your Beanstalk
  # infrastructure and to deploy code to your Beanstalk EC2 instances. Note - if you are
  # deploying an application to Beanstalk that is stored in a different account's S3 bucket, 
  # S3 bucket must have a Bucket Policy that allows this IAM role permission to get objects
  # from the bucket. In addition, if the bucket is encrypted (which is always the case if 
  # the bucket is used by CodePipeline), then the KMS key used to encrypt the bucket must have
  # a key policy that allows this IAM role to call kms:Decrypt and kms:DescribeKey: 
  BeanstalkServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                "sts:ExternalId": elasticbeanstalk
      Path: /
      ManagedPolicyArns:
        # The two roles below are required, per link below: 
        # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-servicerole.html
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService
      Policies:
        - PolicyName: autoscaling
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                  - EC2:CreateLauchTemplate
                  - EC2:CreateLauchTemplateVersions
                  - EC2:DeleteLaunchTemplate
                  - EC2:DeleteLaunchTemplateVersions
                  - EC2:DescribeLaunchTemplate
                  - EC2:DescribeLaunchTemplateVersions
                Resource: '*'

  ####################
  # VPC RESOURCES
  ####################

  # Below, we launch a new VPC that has two private and public subnets: 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC